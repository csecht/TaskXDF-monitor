#! /bin/bash
set -e

# Intended to be used with the -timer script, but can be run manually.
# Example report to terminal stdout and to a log file:
# date     time   │ queued  │ VRAM% │  GTT% │ taskGB │ X │ DFs: [running] [waiting] [ready]
# ----------------│---------│-------│-------│--------│---│----------------------------------
# Sep 26 21:35:55 │      28 │    66 │  1.20 │   0.99 │ 4 │ [.10 .35 .35 .35 ] [na] [.10 ]

# For use with single and multiple AMD GPU cards on Linux systems.
# Supported AMD GPUs: Ellesmere, Polaris, Vega, or Navi.
# This version expects delta frequencies (DF) of O2MDF graviational wave tasks.
# Written with GNU bash, version 5.0 (x86_64-pc-linux-gnu). 
#     No guarantee it will work on all distros.



########################## The Functions ##########################
###################################################################

# Need to know highest or lowest values among all active cards because boinc-client task
#  multiples (<gpu_usage> in app_config.xml) apply to all cards.
# For single card systems, something like this code example would suffice: 
#   vGB_used=$(cat /sys/class/drm/card1/device/mem_info_vram_used)

# Returns highest VRAM GB in use among AMD card(s)
vgbused ()
{
    vGB_used=0
    for p in $amd_paths
    do
        card_path=$(grep -o '/sys/class/drm/card./device/' <<<$p)
        vm_used=$(cat ${card_path}mem_info_vram_used)
        temp_used=$(bc <<<"$vm_used / 1024^3")
        if  [ $(bc <<<"$temp_used > $vGB_used") -eq 1 ]; then
           vGB_used=$temp_used
        fi
    done
    echo "$vGB_used"
}

# Returns highest VRAM used % among AMD card(s).
vrampct ()
{
    vpct_curr=0
    for p in $amd_paths
    do
        card_path=$(grep -o '/sys/class/drm/card./device/' <<<$p)
        vm_used=$(cat ${card_path}mem_info_vram_used)
        vm_tot=$(cat ${card_path}mem_info_vram_total)
        tmp_vpct_curr=$(( 100 * vm_used / vm_tot ))
        if ((tmp_vpct_curr > vpct_curr)); then
           vpct_curr=$tmp_vpct_curr
        fi
    done
    echo $vpct_curr
}

# Returns highest GTT used % among AMD card(s).
gttpct ()
{
    gttpct_curr=0
    for p in $amd_paths
    do
        card_path=$(grep -o '/sys/class/drm/card./device/' <<<$p)
        gtt_used=$(cat ${card_path}mem_info_gtt_used)
        gtt_tot=$(cat ${card_path}mem_info_gtt_total)
        tmp_gttpct_curr=$(bc <<<"scale=2; 100 * $gtt_used / $gtt_tot")
        if [ $(bc <<<"$tmp_gttpct_curr > $gttpct_curr") -eq 1 ]; then
           gttpct_curr=$tmp_gttpct_curr
        fi
    done
    echo $gttpct_curr
}

#################################################################################################
#                          Set things up and quit if things can't be set up.
#################################################################################################

# The log file is expected to be in the current directory.
script="$(basename -- $0)"
log_file=$script.log
if [ ! -f $log_file ]; then
    touch $log_file
fi

# Exit point. Script only works with supported AMD devices and their card paths. 
# If the proxy file "mem_info_vram_total" does not exist for a particular card number, 
#   then that card has no vram or gtt data to process and is not evaluated.
#amd_paths=$(find /sys/class/drm/card?/device/mem_info_vram_total -print)
amd_paths=$(find /sys/class/drm/card?/device/mem_info_vram_total -print)
num_gpu=$(wc -w <<<"$amd_paths")

if [ -z "$amd_paths" ]; then
   echo "There are no active or recognized AMD cards. Exiting..." | tee -a $log_file
   exit 1
fi

# Need to first get boinc data on all tasks in queue so relevant tasks can be parsed.
# Subsequent filtering and pasting works because boinc-client --get_tasks reports tasks
#   sorted by order of action precedent.
# Watch for possible boinc "Authentication failure -155" error when calling boinccmd.
# If boinccmd cannot be executed outside of the boinc data folder or /user/bin, see: 
#   https://einsteinathome.org/content/cant-access-local-boinc-client-anymore-authorization-failure-155
# Path to boinccmd is usually /usr/bin/boinccmd, but may differ in some distributions, 
#   so find path with 'which'.

# Exit point if boinccmd not found.
boinc_cmd=$(command -v boinccmd)
if [ ! $boinc_cmd ]; then
    echo "Error: OS command [boinccmd] executable not found.
    Install for...
        Linux: sudo apt-get install boinc-client boinc-manager
    Exiting..."
    exit 1
fi

tasks="$(${boinc_cmd} --get_tasks)"

# Parse task names from all queued tasks; used for calculating DF.
names=$(echo "$tasks" | grep '   name' | sed 's/   name: //')

# Exit point. Script expects only task names with two search frequency values present.
if grep -qv "O2MDF" <<<"$names"; then
   echo "I need O2MDF tasks to run. Exiting...." | tee -a $log_file
   exit 0
fi

total_tasks=$(wc -l <<<"$names")

# Parse relevant lines from all tasks; used for eval of task run categories
# Prepend newline to the 'states' vars so later paste retains register with $allDFs. 
# Only running, waiting, and suspended tasks will have a 'fraction done' tag.
states=""$'\n'"$(echo "$tasks" | grep '   state' | sed 's/   state: //')"
schstates=""$'\n'"$(echo "$tasks" | grep 'scheduler state' | sed 's/   scheduler state: //')"
fracdone=$(echo "$tasks" | grep 'fraction done' | sed 's/   fraction done: //')

# Need to get the  highest progressed running task, b/c a card with a task at 99% completion
#   or at the CPU transition stage may have a lower than needed VRAM% for running that task.
#  A task that has just begun will not have brought VRAM% up to its running 'speed', so
#   find the lowest frac_done value.
# $frac_xx are used in main body to evaluate increasing task X when a task is near completion
#   or just begun running.
frac_hi=0
frac_lo=100
while read f
do
    tmpfrac=$f
    if [ $(bc <<<"$tmpfrac > $frac_hi") -eq 1 ]; then
    frac_hi=$tmpfrac
    fi
    
    if [ $(bc <<<"$tmpfrac < $frac_lo") -eq 1 ]; then
    frac_lo=$tmpfrac
    fi
done <<<"$fracdone"


# NOTE: Cannot use grep -c in place of | wc -l for counting b/c when nothing is found,
#   grep returns a non-zero stderr, causing set -e to exit script even though grep returns "0".
num_run=$(grep 'active_task_state: EXECUTING' <<<"$tasks" | wc -l)
num_wait=$(grep 'scheduler state: preempted' <<<"$tasks" | wc -l)

# Get current X.
# NOTE: $curr_X will not be accurate if non-AMD cards are crunching.
# Wrong task X settings also may be applied when the number of tasks running is limited
#    by <max_concurrent> or <project_max_concurrent> in app_config.xml.
if ((num_run > 0)); then
    curr_X=$((num_run/num_gpu))
elif ((num_run == 0)) & ((total_tasks == 0)); then
    echo "$(date "+%b %d %T") No tasks are available; check Boinc Manager."| tee -a $log_file
fi

# Delta frequency (DF) of all tasks are later filtered for relevant tasks.
while read name
do
    freqs=$(grep -oE "[[:digit:]]+\\.[[:digit:]]{2}" <<<"$name")
    f1=$(echo $freqs | cut -d" " -f 1)      # Do not quote $freqs or do <<<$freqs.
    f2=$(echo $freqs | cut -d" " -f 2)
    df=$(bc <<<"scale=2; $f2-$f1")
    allDFs="${allDFs}"$'\n'"$df"            # First pass prepends a newline, like $states.
done <<<"$names"

# Need to have relevant data from each task in one row. Lines in vars should be in register.
findDFs=$(paste <(echo "$allDFs") <(echo "$states") <(echo "$schstates"))


# Get DFs of all running (scheduled) tasks.
# Get DF of all waiting (preempted) tasks and the next waiting task to run.
# Get DF of all n ready (downloaded & unintialized) tasks, given n GPUs, and next ready task.
#   Can look-ahead for more ready tasks with: if [ $cnt -le $(($num_gpu*$curr_X)) ] 
#     instead of: if ((cnt <= num_gpu)).
# This all works because boinc-client --get_tasks sorts tasks by order of action precedent.
waitDF_hi=0
cnt=0
readyDF_hi=0
while read line
do
    if [[  "$line" =~ scheduled ]]; then
        runDF=$(grep -oE "[0-9]?\\.[0-9]{2}" <<<"$line")
        runDF_all="${runDF_all}$runDF "                     # Used only for stdout or logging
    fi

    if [[  "$line" =~ preempted ]]; then
        waitDF=$(grep -oE "[0-9]?\\.[0-9]{2}" <<<"$line")
        waitDF_all="${waitDF_all}$waitDF "
        for df in $waitDF_all; do                        
            if [ $(bc <<<"$df > $waitDF_hi") -eq 1 ]; then    # Get the highest waiting DF
                waitDF_hi=$df
            fi
        done
    fi

    if [[ "$line" =~ downloaded[[:space:]]uninitialized ]]; then
        cnt=$((cnt+1))
        if ((cnt <= num_gpu)); then
            readyDF=$(grep -oE "[0-9]?\\.[0-9]{2}" <<<"$line")
            readyDF_lookahead="${readyDF_lookahead}$readyDF "
        fi
        for df in $readyDF_lookahead; do                    # Get the highest ready DF
            if [ $(bc <<<"$df > $readyDF_hi") -eq 1 ]; then
                readyDF_hi=$df
            fi
        done
    fi
done <<<"$findDFs"


# When no tasks waiting, provide something other than nothing for reporting.
if [ ! "$waitDF_all" ]; then
    waitDF_all="na"
fi

# Provide cleanup to prevent a run-away log file.
# Default: 100 MB is the file size limit that triggers clearing its contents.
# Provide data table header if starting with an empty file.
logsize_lim=100
size_log=$(du -0 -m $log_file | awk '{print $1}')
if ((size_log >= logsize_lim)); then
    printf "\n*** The file $log_file was cleared because it reached $size_log. ***\n\n" \
        | tee $log_file  # NOTE: not tee -a option, so notification overwrites file.
    echo -n "date     time   │ queued │ VRAM% │ GTT% │ taskGB │ X │ " >> $log_file
    printf "DFs: [running] [waiting] [ready]\n"                       >> $log_file
    echo -n "----------------│--------│-------│------│--------│---│"  >> $log_file
    echo "----------------------------------------"                   >> $log_file
elif ((size_log == 0)); then
    echo -n "date     time   │ queued │ VRAM% │ GTT% │ taskGB │ X │ " > $log_file
    printf "DFs: [running] [waiting] [ready]\n"                       >> $log_file
    echo -n "----------------│--------│-------│------│--------│---│"  >> $log_file
    echo "----------------------------------------"                   >> $log_file
fi


#################################################################################################
#                                      Data reporting 
################################################################################################# 

vGB_used=$(vgbused)
vpct_curr=$(vrampct)
gttpct_fmt=$(printf '%.2f' "$(gttpct)")
taskGB=$(printf '%.2f' "$(bc <<<"scale=2; $vGB_used / $curr_X")")

date=$(date "+%b %d")
time=$(date "+%T")

# These escape codes will work with all ANSI/VT100 terminals and terminal emulators.
grn='\033[0;32m'
brn='\033[0;33m'
prpl='\033[1;35m'
nc='\033[0m'
ital='\033[0;3m'
grnital='\033[0;32;3m'
blue='\x1b[1;38;5;33m'  # Blue and orange are better for red-gree color blind users
orng='\x1b[1;38;5;202m'

# Need pretty terminal output,
# queued │ VRAM% │ GTT% │ taskGB │
pad=" %5d │ %5d │ %4.2f │ %6.2f │" 
printf "$date $time │ "                                           | tee -a $log_file
printf "$pad" "$total_tasks" "$vpct_curr" "$gttpct_fmt" "$taskGB" | tee -a $log_file
printf " ${curr_X} │ ${blue}[$runDF_all]${nc} ${orng}[$waitDF_all]${nc} ${brn}[$readyDF_lookahead]${nc}\n"
# ..but also need to remove font color escape codes from file text.
printf " ${curr_X} │ [$runDF_all] [$waitDF_all] [$readyDF_lookahead]\n" >> $log_file

#printf " ${curr_X} │ ${grn}[$runDF_all]${nc} ${prpl}[$waitDF_all]${nc} ${brn}[$readyDF_lookahead]${nc}\n" \
#    | sed 's,[\x1B-033]\[[0-9;]*[a-zA-Z],,g' >> $log_file

# https://unix.stackexchange.com/questions/14684/removing-control-chars-including-console-codes-colours-from-script-output


